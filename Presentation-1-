from abc import ABC, abstractmethod
import time
import csv

class Person(ABC):
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def display_info(self):
        return f"Name: {self.name}, Age: {self.age}"

class Student(Person):
    def __init__(self, name, age, student_id, courses, logical_expression):
        super().__init__(name, age)
        self.student_id = student_id
        self.courses = courses  
        self.logical_expression = logical_expression  

    def display_info(self):
        base_info = super().display_info()
        course_names = ', '.join(course.course_name for course in self.courses)
        return f"{base_info}, Student ID: {self.student_id}, Courses: {course_names}, Logical Expression: {self.logical_expression}"

    def add_course(self, course):
        if course not in self.courses:
            self.courses.append(course)

    def remove_course(self, course):
        if course in self.courses:
            self.courses.remove(course)

class Course:
    def __init__(self, course_id, course_name, instructor):
        self.course_id = course_id
        self.course_name = course_name
        self.instructor = instructor

    def display_info(self):
        return f"Course ID: {self.course_id}, Course Name: {self.course_name}, Instructor: {self.instructor}"

class StudentManagementSystem:
    def __init__(self):
        self.students = []
        self.courses = []

    def add_student(self, student):
        self.students.append(student)

    def remove_student(self, student_id):
        self.students = [student for student in self.students if student.student_id != student_id]

    def search_student(self, student_id):
        for student in self.students:
            if student.student_id == student_id:
                return student
        return None

    def display_students(self):
        for student in self.students:
            print(student.display_info())

    def sort_students_by_name(self):
        self.students.sort(key=lambda st: st.name)

    def sort_students_by_age(self):
        self.students.sort(key=lambda st: st.age)

    def add_course(self, course):
        self.courses.append(course)

    def get_course_by_id(self, course_id):
        for course in self.courses:
            if course.course_id == course_id:
                return course
        return None

    def save_students_to_file(self, filename):
        with open(filename, 'w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(['name', 'age', 'student_id', 'courses', 'logical_expression'])
            for student in self.students:
                course_ids = '|'.join(course.course_id for course in student.courses)
                writer.writerow([student.name, student.age, student.student_id, course_ids, student.logical_expression])

    def load_students_from_file(self, filename):
        try:
            with open(filename, 'r', newline='') as file:
                reader = csv.DictReader(file)
                for row in reader:
                    name = row['name']
                    age = int(row['age'])
                    student_id = row['student_id']
                    course_ids = row['courses'].split('|')
                    courses = [self.get_course_by_id(cid) for cid in course_ids if self.get_course_by_id(cid)]
                    logical_expression = row['logical_expression']
                    student = Student(name, age, student_id, courses, logical_expression)
                    self.add_student(student)
        except FileNotFoundError:
            print(f"File {filename} not found.")
        except Exception as e:
            print(f"An error occurred: {e}")

    @staticmethod
    def evaluate_logical_expression(expression):
        try:
            return eval(expression)
        except:
            return False

    def sort_by_logical_expression(self):
        self.students.sort(key=lambda x: StudentManagementSystem.evaluate_logical_expression(x.logical_expression))

    @staticmethod
    def insertion_sort(students):
        for i in range(1, len(students)):
            key = students[i]
            j = i - 1
            while j >= 0 and key.age < students[j].age:
                students[j + 1] = students[j]
                j -= 1
            students[j + 1] = key
        return students

    def merge_sort(students):
        if len(students) > 1:
            mid = len(students) // 2
            left = students[:mid]
            right = students[mid:]

            StudentManagementSystem.merge_sort(left)
            StudentManagementSystem.merge_sort(right)

            i = j = k = 0
            while i < len(left) and j < len(right):
                if left[i].age < right[j].age:
                    students[k] = left[i]
                    i += 1
                else:
                    students[k] = right[j]
                    j += 1
                k += 1

            while i < len(left):
                students[k] = left[i]
                i += 1
                k += 1

            while j < len(right):
                students[k] = right[j]
                j += 1
                k += 1
        return students

    @staticmethod
    def measure_performance(sort_function, students):
        start_time = time.time()
        sorted_students = sort_function(students.copy())
        end_time = time.time()
        return end_time - start_time
    def analyze_performance(students):
        insertion_sort_time = measure_performance(insertion_sort, students)
        merge_sort_time = measure_performance(merge_sort, students)
        logical_sort_time = measure_performance(sort_by_logical_expression, students)

        print(f"Insertion Sort Time: {insertion_sort_time:.6f} seconds")
        print(f"Merge Sort Time: {merge_sort_time:.6f} seconds")
        print(f"Logical Sort Time: {logical_sort_time:.6f} seconds")

def main():
    system = StudentManagementSystem()
    initial_courses = [
        Course("a122", "Math", "Dr.Majeed"),
        Course("sas", "Science", "Dr.Ali"),
        Course("RA3", "History", "Dr.Mohamed")
    ]
    for course in initial_courses:
        system.add_course(course)

    initial_students = [
        Student("Karim", 30, "a122", [initial_courses[0], initial_courses[1]], "True"),
        Student("Fatya", 28, "Sas", [initial_courses[1], initial_courses[2]], "False"),
        Student("Omar", 24, "RA3", [initial_courses[0], initial_courses[2]], "True")
    ]
    for student in initial_students:
        system.add_student(student)

    while True:
        print("\nStudent Management System")
        print("1. Add Student")
        print("2. Remove Student")
        print("3. Search Student")
        print("4. Display Students")
        print("5. Sort Students by Name")
        print("6. Sort Students by Age")
        print("7. Save Students to File")
        print("8. Load Students from File")
        print("9. Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            name = input("Enter student name: ")
            age = int(input("Enter student age: "))
            student_id = input("Enter student ID: ")
            course_ids = input("Enter course IDs (comma-separated): ").split(',')
            courses = [system.get_course_by_id(cid.strip()) for cid in course_ids if system.get_course_by_id(cid.strip())]
            logical_expression = input("Enter logical expression (e.g. True/False or any Python expression): ")
            student = Student(name, age, student_id, courses, logical_expression)
            system.add_student(student)
            print("Student added successfully.")

        elif choice == '2':
            student_id = input("Enter student ID to remove: ")
            system.remove_student(student_id)
            print("Student removed successfully.")

        elif choice == '3':
            student_id = input("Enter student ID to search: ")
            student = system.search_student(student_id)
            if student:
                print(student.display_info())
            else:
                print("Student not found.")

        elif choice == '4':
            system.display_students()

        elif choice == '5':
            system.sort_students_by_name()
            print("Students sorted by name.")

        elif choice == '6':
            system.sort_students_by_age()
            print("Students sorted by age.")

        elif choice == '7':
            filename = input("Enter filename to save students: ")
            system.save_students_to_file(filename)
            print("Students saved to file successfully.")

        elif choice == '8':
            filename = input("Enter filename to load students: ")
            system.load_students_from_file(filename)
            print("Students loaded from file successfully.")

        elif choice == '9':
            print("Exiting the system.")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
